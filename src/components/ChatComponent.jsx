import React, { useState, useEffect } from "react";
import ChatService from "../services/chatService";
import { useAuth } from "../components/AuthContext";
import "../styles/ChatComponent.css";

const ChatComponent = () => {
  const { userEmail, userRole } = useAuth();

  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState("");
  const [isOpen, setIsOpen] = useState(false);

  const [selectedUser, setSelectedUser] = useState(null); // üü° —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞
  const [userList, setUserList] = useState([]); // üü° —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–¥–º–∏–Ω–∞

  useEffect(() => {
    if (!userEmail) return;

    ChatService.connect(userEmail, userRole, (msg) => {
      setMessages((prev) => [...prev, msg]);

      // –µ—Å–ª–∏ –∞–¥–º–∏–Ω –∏ –ø—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫
      if (userRole === "ROLE_ADMIN" && msg.sender && msg.sender !== "ADMIN") {
        setUserList((prev) =>
          prev.includes(msg.sender) ? prev : [...prev, msg.sender]
        );
      }
    });

    return () => ChatService.disconnect();
  }, [userEmail, userRole]);

  const handleSend = () => {
    if (!newMessage.trim()) return;

    const receiver = userRole === "ROLE_ADMIN" ? selectedUser : "ADMIN";
    if (!receiver) {
      alert("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      return;
    }

    ChatService.sendMessage(userEmail, newMessage, receiver);
    setNewMessage("");
  };

  // üü¢ –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  const renderUserChat = () => (
    <div className="chat-window">
      <div className="chat-header">
        üí¨ –ß–∞—Ç —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        <button onClick={() => setIsOpen(false)}>‚úñ</button>
      </div>
      <div className="chat-messages">
        {messages
          .filter(
            (m) =>
              m.sender === "ADMIN" ||
              m.sender === userEmail ||
              m.receiver === userEmail
          )
          .map((m, i) => (
            <div
              key={i}
              className={`chat-message ${
                m.sender === userEmail ? "mine" : ""
              }`}
            >
              <b>{m.sender}:</b> {m.content}
            </div>
          ))}
      </div>

      <div className="chat-input">
        <input
          type="text"
          value={newMessage}
          onChange={(e) => setNewMessage(e.target.value)}
          placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
        />
        <button onClick={handleSend}>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
      </div>
    </div>
  );

  // üü£ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  const renderAdminChat = () => {
    const handleCloseUser = (user) => {
      // üßπ –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ —á–∏—Å—Ç–∏–º –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      setUserList((prev) => prev.filter((u) => u !== user));
      setMessages((prev) =>
        prev.filter((m) => m.sender !== user && m.receiver !== user)
      );
      if (selectedUser === user) {
        setSelectedUser(null);
      }
    };

    return (
      <div className="chat-window admin-chat">
        <div className="chat-header">
          üí¨ –ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
          <button onClick={() => setIsOpen(false)}>‚úñ</button>
        </div>

        {/* üîπ –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –≤–∫–ª–∞–¥–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
        <div className="chat-users-bar">
          {userList.length === 0 ? (
            <p className="no-users">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>
          ) : (
            userList.map((u) => (
              <div
                key={u}
                className={`user-tab ${u === selectedUser ? "active" : ""}`}
              >
                <button
                  className="user-name"
                  onClick={() => setSelectedUser(u)}
                >
                  {u}
                </button>
                <button
                  className="close-user"
                  onClick={() => handleCloseUser(u)}
                  title="–ó–∞–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥"
                >
                  ‚úñ
                </button>
              </div>
            ))
          )}
        </div>

        {/* üîπ –¢–µ–ª–æ —á–∞—Ç–∞ (—Å–æ–æ–±—â–µ–Ω–∏—è + –≤–≤–æ–¥) */}
        {selectedUser ? (
          <>
            <div className="chat-messages">
              {messages
                .filter(
                  (m) =>
                    (m.sender === selectedUser && m.receiver === "ADMIN") ||
                    (m.sender === "ADMIN" && m.receiver === selectedUser)
                )
                .map((m, i) => (
                  <div
                    key={i}
                    className={`chat-message ${
                      m.sender === "ADMIN" ? "mine" : ""
                    }`}
                  >
                    <b>{m.sender}:</b> {m.content}
                  </div>
                ))}
            </div>

            <div className="chat-input">
              <input
                type="text"
                value={newMessage}
                onChange={(e) => setNewMessage(e.target.value)}
                placeholder={`–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è ${selectedUser}`}
              />
              <button onClick={handleSend}>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
            </div>
          </>
        ) : (
          <div className="no-user-selected">–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</div>
        )}
      </div>
    );
  };

  // üü§ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ—Å—Ç—å –ª–∏ —ç—Ç–æ (–µ—Å–ª–∏ –Ω–µ—Ç email –∏–ª–∏ —Ä–æ–ª–∏)
  const isGuest =
    !userEmail || (!userRole || (userRole !== "ROLE_ADMIN" && userRole !== "ROLE_USER"));

  return (
    <div className={`chat-wrapper ${isGuest ? "chat-hidden" : ""}`}>
      <button className="chat-toggle-btn" onClick={() => setIsOpen(!isOpen)}>
        üí¨ –ß–∞—Ç
      </button>
      {isOpen &&
        (userRole === "ROLE_ADMIN" ? renderAdminChat() : renderUserChat())}
    </div>
  );
};

export default ChatComponent;
